---
title : 自动快照存档
---

* TIME: 2021-02-05 22:59:29
* URL: <https://github.com/cginternals/cppfs/blob/master/source/cppfs/source/windows/LocalFileHandle.cpp>

-----

Skip to content

[ ](https://github.com/)

[ Sign up
](/join?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2F%3Cuser-
name%3E%2F%3Crepo-name%3E%2Fblob%2Fshow&source=header-repo)

  * Why GitHub? 

[Features →](/features)

    * [Code review](/features/code-review/)
    * [Project management](/features/project-management/)
    * [Integrations](/features/integrations)
    * [Actions](/features/actions)
    * [Packages](/features/packages)
    * [Security](/features/security)
    * [Team management](/features#team-management)
    * [Hosting](/features#hosting)
    * [Mobile](/mobile)
    * [Customer stories →](/customer-stories)
    * [Security →](/security)

  * [Team](/team)
  * [Enterprise](/enterprise)
  * Explore 

    * [Explore GitHub →](/explore)

#### Learn & contribute

    * [Topics](/topics)
    * [Collections](/collections)
    * [Trending](/trending)
    * [Learning Lab](https://lab.github.com/)
    * [Open source guides](https://opensource.guide)

#### Connect with others

    * [Events](https://github.com/events)
    * [Community forum](https://github.community)
    * [GitHub Education](https://education.github.com)
    * [GitHub Stars program](https://stars.github.com)

  * [Marketplace](/marketplace)
  * Pricing 

[Plans →](/pricing)

    * [Compare plans](/pricing#feature-comparison)
    * [Contact Sales](https://enterprise.github.com/contact)
    * [Nonprofit →](/nonprofit)
    * [Education →](https://education.github.com)

![](https://github.githubassets.com/images/search-key-slash.svg)

  * [ ![]() In this repository  All GitHub  ↵ Jump to ↵ ]()

  * No suggested jump to results

  * [ ![]() In this repository  All GitHub  ↵ Jump to ↵ ]()
  * [ ![]() In this repository  All GitHub  ↵ Jump to ↵ ]()

[ Sign in
](/login?return_to=%2Fcginternals%2Fcppfs%2Fblob%2Fmaster%2Fsource%2Fcppfs%2Fsource%2Fwindows%2FLocalFileHandle.cpp)
[ Sign up
](/join?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2F%3Cuser-
name%3E%2F%3Crepo-name%3E%2Fblob%2Fshow&source=header-
repo&source_repo=cginternals%2Fcppfs)

{{ message }}

#  [cginternals](/cginternals) / **[cppfs](/cginternals/cppfs) **

  * [ Watch ](/login?return_to=%2Fcginternals%2Fcppfs) [ 24 ](/cginternals/cppfs/watchers)
  * [ Star ](/login?return_to=%2Fcginternals%2Fcppfs) [ 262 ](/cginternals/cppfs/stargazers)
  * [ Fork ](/login?return_to=%2Fcginternals%2Fcppfs) [ 35 ](/cginternals/cppfs/network/members)

  * [ Code ](/cginternals/cppfs)
  * [ Issues 11 ](/cginternals/cppfs/issues)
  * [ Pull requests 2 ](/cginternals/cppfs/pulls)
  * [ Actions ](/cginternals/cppfs/actions)
  * [ Projects 0 ](/cginternals/cppfs/projects)
  * [ Security ](/cginternals/cppfs/security)
  * [ Insights ](/cginternals/cppfs/pulse)

More

  * [ Code ](/cginternals/cppfs)
  * [ Issues ](/cginternals/cppfs/issues)
  * [ Pull requests ](/cginternals/cppfs/pulls)
  * [ Actions ](/cginternals/cppfs/actions)
  * [ Projects ](/cginternals/cppfs/projects)
  * [ Security ](/cginternals/cppfs/security)
  * [ Insights ](/cginternals/cppfs/pulse)

[Permalink](/cginternals/cppfs/blob/e6b03ac2f4d919497acec121dc4df0b69c591257/source/cppfs/source/windows/LocalFileHandle.cpp)

master

##
[cppfs](/cginternals/cppfs)/[source](/cginternals/cppfs/tree/master/source)/[cppfs](/cginternals/cppfs/tree/master/source/cppfs)/[source](/cginternals/cppfs/tree/master/source/cppfs/source)/[windows](/cginternals/cppfs/tree/master/source/cppfs/source/windows)/
**LocalFileHandle.cpp**

[ Go to file ](/cginternals/cppfs/find/master)

  * [ Go to file T ](/cginternals/cppfs/find/master)
  * Go to line L
  *   * Copy path 

[![@sbusch42](https://avatars3.githubusercontent.com/u/4170982?s=48&v=4)](/sbusch42)

[sbusch42](/sbusch42) [Make cppfs cross-compilable from linux to Windows
(change shouldn't
m…](/cginternals/cppfs/commit/1a0d3c855c70d6926505f492c08df75d69d0cccc "Make
cppfs cross-compilable from linux to Windows \(change shouldn't matter on
Windows host\)")

…

Loading status checks…

Latest commit
[1a0d3c8](/cginternals/cppfs/commit/1a0d3c855c70d6926505f492c08df75d69d0cccc)
on 9 Jul 2019 [ **History**
](/cginternals/cppfs/commits/master/source/cppfs/source/windows/LocalFileHandle.cpp)

    
    
    …atter on Windows host)

**2** contributors

###  Users who have contributed to this file

[ ![@kwallner](https://avatars3.githubusercontent.com/u/8360702?s=48&v=4)
](/cginternals/cppfs/commits/master/source/cppfs/source/windows/LocalFileHandle.cpp?author=kwallner)
[ ![@sbusch42](https://avatars3.githubusercontent.com/u/4170982?s=48&v=4)
](/cginternals/cppfs/commits/master/source/cppfs/source/windows/LocalFileHandle.cpp?author=sbusch42)

418 lines (329 sloc)  8.42 KB

[Raw](/cginternals/cppfs/raw/master/source/cppfs/source/windows/LocalFileHandle.cpp)
[Blame](https://github.com/cginternals/cppfs/blame/master/source/cppfs/source/windows/LocalFileHandle.cpp)

[ ](https://desktop.github.com) [
](/login?return_to=%2Fcginternals%2Fcppfs%2Fblob%2Fmaster%2Fsource%2Fcppfs%2Fsource%2Fwindows%2FLocalFileHandle.cpp)
[
](/login?return_to=%2Fcginternals%2Fcppfs%2Fblob%2Fmaster%2Fsource%2Fcppfs%2Fsource%2Fwindows%2FLocalFileHandle.cpp)

|  
---|---  
| #include <cppfs/windows/LocalFileHandle.h>  
|  
| #include <fstream>  
|  
| #include <windows.h>  
|  
| #include <cppfs/cppfs.h>  
| #include <cppfs/FilePath.h>  
| #include <cppfs/windows/LocalFileSystem.h>  
| #include <cppfs/windows/LocalFileIterator.h>  
|  
|  
| namespace cppfs  
| {  
|  
|  
| LocalFileHandle::LocalFileHandle(std::shared_ptr<LocalFileSystem> fs, const
std::string & path)  
| : m_fs(fs)  
| , m_path(path)  
| , m_fileInfo(nullptr)  
| {  
| }  
|  
| LocalFileHandle::~LocalFileHandle()  
| {  
|  if (m_fileInfo)  
|  {  
|  delete (WIN32_FILE_ATTRIBUTE_DATA *)m_fileInfo;  
|  }  
| }  
|  
| std::unique_ptr<AbstractFileHandleBackend> LocalFileHandle::clone() const  
| {  
|  return std::unique_ptr<AbstractFileHandleBackend>(new LocalFileHandle(m_fs,
m_path));  
| }  
|  
| AbstractFileSystem * LocalFileHandle::fs() const  
| {  
|  return static_cast<AbstractFileSystem *>(m_fs.get());  
| }  
|  
| void LocalFileHandle::updateFileInfo()  
| {  
|  // Reset file information  
|  if (m_fileInfo)  
|  {  
|  delete (WIN32_FILE_ATTRIBUTE_DATA *)m_fileInfo;  
|  m_fileInfo = nullptr;  
|  }  
| }  
|  
| std::string LocalFileHandle::path() const  
| {  
|  return m_path;  
| }  
|  
| bool LocalFileHandle::exists() const  
| {  
|  readFileInfo();  
|  
|  return (m_fileInfo != nullptr);  
| }  
|  
| bool LocalFileHandle::isFile() const  
| {  
|  readFileInfo();  
|  
|  if (m_fileInfo)  
|  {  
|  return (((WIN32_FILE_ATTRIBUTE_DATA *)m_fileInfo)->dwFileAttributes &
FILE_ATTRIBUTE_DIRECTORY) == 0;  
|  }  
|  
|  return false;  
| }  
|  
| bool LocalFileHandle::isDirectory() const  
| {  
|  readFileInfo();  
|  
|  if (m_fileInfo)  
|  {  
|  return (((WIN32_FILE_ATTRIBUTE_DATA *)m_fileInfo)->dwFileAttributes &
FILE_ATTRIBUTE_DIRECTORY) != 0;  
|  }  
|  
|  return false;  
| }  
|  
| bool LocalFileHandle::isSymbolicLink() const  
| {  
|  readFileInfo();  
|  
|  if (m_fileInfo)  
|  {  
|  return (((WIN32_FILE_ATTRIBUTE_DATA *)m_fileInfo)->dwFileAttributes &
FILE_ATTRIBUTE_REPARSE_POINT) != 0;  
|  }  
|  
|  return false;  
| }  
|  
| std::vector<std::string> LocalFileHandle::listFiles() const  
| {  
|  std::vector<std::string> entries;  
|  
|  // Open directory  
|  WIN32_FIND_DATA findData;  
|  std::string query = FilePath(m_path).fullPath() + "/*";  
|  HANDLE findHandle = FindFirstFileA(query.c_str(), &findData);  
|  
|  if (findHandle == INVALID_HANDLE_VALUE)  
|  {  
|  return entries;  
|  }  
|  
|  // Read directory entries  
|  do  
|  {  
|  // Get name  
|  std::string name = findData.cFileName;  
|  
|  // Ignore . and ..  
|  if (name != ".." && name != ".")  
|  {  
|  entries.push_back(name);  
|  }  
|  } while (FindNextFile(findHandle, &findData));  
|  
|  // Close directory  
|  FindClose(findHandle);  
|  
|  // Return directory entries  
|  return entries;  
| }  
|  
| std::unique_ptr<AbstractFileIteratorBackend> LocalFileHandle::begin() const  
| {  
|  return std::unique_ptr<AbstractFileIteratorBackend>(new
LocalFileIterator(m_fs, m_path));  
| }  
|  
| unsigned int LocalFileHandle::size() const  
| {  
|  readFileInfo();  
|  
|  if (m_fileInfo)  
|  {  
|  // [TODO] Use 64bit numbers  
|  auto fileSizeH = ((WIN32_FILE_ATTRIBUTE_DATA *)m_fileInfo)->nFileSizeHigh;  
|  auto fileSizeL = ((WIN32_FILE_ATTRIBUTE_DATA *)m_fileInfo)->nFileSizeLow;  
|  return static_cast<unsigned int>(static_cast<__int64>(fileSizeH) << 32 |
fileSizeL);  
|  }  
|  
|  return 0;  
| }  
|  
| unsigned int LocalFileHandle::accessTime() const  
| {  
|  readFileInfo();  
|  
|  if (m_fileInfo)  
|  {  
|  // [TODO] Use 64bit numbers  
|  auto time = ((WIN32_FILE_ATTRIBUTE_DATA *)m_fileInfo)->ftLastAccessTime;  
|  return static_cast<unsigned int>(static_cast<__int64>(time.dwHighDateTime)
<< 32 | time.dwLowDateTime);  
|  }  
|  
|  return 0;  
| }  
|  
| unsigned int LocalFileHandle::modificationTime() const  
| {  
|  readFileInfo();  
|  
|  if (m_fileInfo)  
|  {  
|  // [TODO] Use 64bit numbers  
|  auto time = ((WIN32_FILE_ATTRIBUTE_DATA *)m_fileInfo)->ftLastWriteTime;  
|  return static_cast<unsigned int>(static_cast<__int64>(time.dwHighDateTime)
<< 32 | time.dwLowDateTime);  
|  }  
|  
|  return 0;  
| }  
|  
| unsigned int LocalFileHandle::userId() const  
| {  
|  return 0;  
| }  
|  
| void LocalFileHandle::setUserId(unsigned int)  
| {  
| }  
|  
| unsigned int LocalFileHandle::groupId() const  
| {  
|  return 0;  
| }  
|  
| void LocalFileHandle::setGroupId(unsigned int)  
| {  
| }  
|  
| unsigned long LocalFileHandle::permissions() const  
| {  
|  return 0ul;  
| }  
|  
| void LocalFileHandle::setPermissions(unsigned long)  
| {  
| }  
|  
| bool LocalFileHandle::createDirectory()  
| {  
|  // Check directory  
|  if (exists()) return false;  
|  
|  // Create directory  
|  if (!CreateDirectoryA(m_path.c_str(), nullptr))  
|  {  
|  return false;  
|  }  
|  
|  // Done  
|  updateFileInfo();  
|  return true;  
| }  
|  
| bool LocalFileHandle::removeDirectory()  
| {  
|  // Check directory  
|  if (!isDirectory()) return false;  
|  
|  // Remove directory  
|  if (!RemoveDirectoryA(m_path.c_str()))  
|  {  
|  return false;  
|  }  
|  
|  // Done  
|  updateFileInfo();  
|  return true;  
| }  
|  
| bool LocalFileHandle::copy(AbstractFileHandleBackend & dest)  
| {  
|  // Check source file  
|  if (!isFile()) return false;  
|  
|  // Get source and target filenames  
|  std::string src = m_path;  
|  std::string dst = dest.path();  
|  
|  if (dest.isDirectory())  
|  {  
|  std::string filename = FilePath(m_path).fileName();  
|  dst = FilePath(dest.path()).resolve(filename).fullPath();  
|  }  
|  
|  // Copy file  
|  if (!CopyFileA(src.c_str(), dst.c_str(), FALSE))  
|  {  
|  // Error!  
|  return false;  
|  }  
|  
|  // Done  
|  updateFileInfo();  
|  return true;  
| }  
|  
| bool LocalFileHandle::move(AbstractFileHandleBackend & dest)  
| {  
|  // Check source file  
|  if (!exists()) return false;  
|  
|  // Get source and target filenames  
|  std::string src = m_path;  
|  std::string dst = dest.path();  
|  
|  if (dest.isDirectory())  
|  {  
|  std::string filename = FilePath(m_path).fileName();  
|  dst = FilePath(dest.path()).resolve(filename).fullPath();  
|  }  
|  
|  // Move file  
|  if (!MoveFileA(src.c_str(), dst.c_str()))  
|  {  
|  // Error!  
|  return false;  
|  }  
|  
|  // Update path  
|  m_path = dst;  
|  updateFileInfo();  
|  
|  // Done  
|  return true;  
| }  
|  
| bool LocalFileHandle::createLink(AbstractFileHandleBackend & dest)  
| {  
|  // Check source file  
|  if (!isFile()) return false;  
|  
|  // Get source and target filenames  
|  std::string src = m_path;  
|  std::string dst = dest.path();  
|  
|  if (dest.isDirectory())  
|  {  
|  std::string filename = FilePath(m_path).fileName();  
|  dst = FilePath(dest.path()).resolve(filename).fullPath();  
|  }  
|  
|  // Copy file  
|  if (!CreateHardLinkA(dst.c_str(), src.c_str(), 0))  
|  {  
|  // Error!  
|  return false;  
|  }  
|  
|  // Done  
|  return true;  
| }  
|  
| bool LocalFileHandle::createSymbolicLink(AbstractFileHandleBackend & dest)  
| {  
|  // Check source file  
|  if (!isFile()) return false;  
|  
|  // Get source and target filenames  
|  std::string src = m_path;  
|  std::string dst = dest.path();  
|  
|  if (dest.isDirectory())  
|  {  
|  std::string filename = FilePath(m_path).fileName();  
|  dst = FilePath(dest.path()).resolve(filename).fullPath();  
|  }  
|  
|  // Copy file  
|  if (!CreateSymbolicLinkA(dst.c_str(), src.c_str(), 0))  
|  {  
|  // Error!  
|  return false;  
|  }  
|  
|  // Done  
|  return true;  
| }  
|  
| bool LocalFileHandle::rename(const std::string & filename)  
| {  
|  // Check file  
|  if (!exists()) return false;  
|  
|  // Compose new file path  
|  std::string path =
FilePath(FilePath(m_path).directoryPath()).resolve(filename).fullPath();  
|  
|  // Rename  
|  if (!MoveFileA(m_path.c_str(), path.c_str()))  
|  {  
|  // Error!  
|  return false;  
|  }  
|  
|  // Update path  
|  m_path = path;  
|  updateFileInfo();  
|  
|  // Done  
|  return true;  
| }  
|  
| bool LocalFileHandle::remove()  
| {  
|  // Check source file  
|  if (!isFile()) return false;  
|  
|  // Delete file  
|  if (!DeleteFileA(m_path.c_str()))  
|  {  
|  return false;  
|  }  
|  
|  // Done  
|  updateFileInfo();  
|  return true;  
| }  
|  
| std::unique_ptr<std::istream>
LocalFileHandle::createInputStream(std::ios_base::openmode mode) const  
| {  
|  return std::unique_ptr<std::istream>(new std::ifstream(m_path, mode));  
| }  
|  
| std::unique_ptr<std::ostream>
LocalFileHandle::createOutputStream(std::ios_base::openmode mode)  
| {  
|  return std::unique_ptr<std::ostream>(new std::ofstream(m_path, mode));  
| }  
|  
| void LocalFileHandle::readFileInfo() const  
| {  
|  // Check if file info has already been read  
|  if (m_fileInfo) return;  
|  
|  // Create file information structure  
|  m_fileInfo = (void *)new WIN32_FILE_ATTRIBUTE_DATA;  
|  
|  // Get file info  
|  if (!GetFileAttributesExA(m_path.c_str(), GetFileExInfoStandard,
(WIN32_FILE_ATTRIBUTE_DATA*)m_fileInfo))  
|  {  
|  // Error!  
|  delete (WIN32_FILE_ATTRIBUTE_DATA *)m_fileInfo;  
|  m_fileInfo = nullptr;  
|  }  
| }  
|  
|  
| } // namespace cppfs  
  
  * Copy lines 
  * Copy permalink 
  * [View git blame](https://github.com/cginternals/cppfs/blame/e6b03ac2f4d919497acec121dc4df0b69c591257/source/cppfs/source/windows/LocalFileHandle.cpp)
  * [Reference in new issue](/cginternals/cppfs/issues/new)

Go

  * © 2020 GitHub, Inc.
  * [Terms](https://github.com/site/terms)
  * [Privacy](https://github.com/site/privacy)
  * [Security](https://github.com/security)
  * [Status](https://githubstatus.com/)
  * [Help](https://docs.github.com)

[ ](https://github.com "GitHub")

  * [Contact GitHub](https://github.com/contact)
  * [Pricing](https://github.com/pricing)
  * [API](https://docs.github.com)
  * [Training](https://services.github.com)
  * [Blog](https://github.blog)
  * [About](https://github.com/about)

You can’t perform that action at this time.

You signed in with another tab or window. [Reload]() to refresh your session.
You signed out in another tab or window. [Reload]() to refresh your session.

