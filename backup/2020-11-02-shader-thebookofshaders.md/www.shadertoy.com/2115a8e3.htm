---
title : 自动快照存档
---

* TIME: 2021-01-30 19:56:40
* URL: <https://www.shadertoy.com/view/lsXcWn>

-----

[Shadertoy](/)

[浏览](/browse) [新建](/new) [登录](/signin)

No WebGL available :(

3.95 59.8 fps 420 x 236

Smiley Tutorial

![](/img/themes/classic/wasWeek.png)

![](/img/themes/classic/share.png) ![](/img/themes/classic/likeNo.png) 189

Views: 6716, Tags:

[2d](/results?query=tag%3D2d), [tutorial](/results?query=tag%3Dtutorial),
[cartoon](/results?query=tag%3Dcartoon),
[animated](/results?query=tag%3Danimated),
[smiley](/results?query=tag%3Dsmiley)

创建自 [BigWIngs](/user/BigWIngs) 内 2017-02-23

  

This is a smiley I did as part of a tutorial on YouTube. Use the mouse to look
around! Hope you like it! <https://www.youtube.com/watch?v=ZlNnrpM0TRg>

CommonSoundBuffer ABuffer BBuffer CBuffer DCubemap A

![](/img/image.png)Image

着色器输入

    
    
    uniform vec3      iResolution;           // viewport resolution (in pixels)  
    uniform float     iTime;                 // shader playback time (in seconds)  
    uniform float     iTimeDelta;            // render time (in seconds)  
    uniform int       iFrame;                // shader playback frame  
    uniform float     iChannelTime[4];       // channel playback time (in seconds)  
    uniform vec3      iChannelResolution[4]; // channel resolution (in pixels)  
    uniform vec4      iMouse;                // mouse pixel coords. xy: current (if MLB down), zw: click  
    uniform samplerXX iChannel0..3;          // input channel. XX = 2D/Cube  
    uniform vec4      iDate;                 // (year, month, day, time in seconds)  
    uniform float     iSampleRate;           // sound sample rate (i.e., 44100)
    
    
    xxxxxxxxxx
    // "Smiley Tutorial" by Martijn Steinrucken aka BigWings - 2017
    // License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.
    // Email:countfrolic@gmail.com Twitter:@The_ArtOfCode
    //
    // This Smiley is part of my ShaderToy Tutorial series on YouTube:
    // Part 1 - Creating the Smiley - https://www.youtube.com/watch?v=ZlNnrpM0TRg
    // Part 2 - Animating the Smiley - https://www.youtube.com/watch?v=vlD_KOrzGDc&t=83s
    ​
    #define S(a, b, t) smoothstep(a, b, t)
    #define B(a, b, blur, t) S(a-blur, a+blur, t)*S(b+blur, b-blur, t)
    #define sat(x) clamp(x, 0., 1.)
    ​
    float remap01(float a, float b, float t) {
        return sat((t-a)/(b-a));
    }
    ​
    float remap(float a, float b, float c, float d, float t) {
        return sat((t-a)/(b-a)) * (d-c) + c;
    }
    ​
    vec2 within(vec2 uv, vec4 rect) {
        return (uv-rect.xy)/(rect.zw-rect.xy);
    }
    ​
    vec4 Brow(vec2 uv, float smile) {
        float offs = mix(.2, 0., smile);
        uv.y += offs;
        
        float y = uv.y;
        uv.y += uv.x*mix(.5, .8, smile)-mix(.1, .3, smile);
        uv.x -= mix(.0, .1, smile);
        uv -= .5;
        
        vec4 col = vec4(0.);
        
        float blur = .1;
        
        float d1 = length(uv);
        float s1 = S(.45, .45-blur, d1);
        float d2 = length(uv-vec2(.1, -.2)*.7);
        float s2 = S(.5, .5-blur, d2);
        
        float browMask = sat(s1-s2);
        
        float colMask = remap01(.7, .8, y)*.75;
        colMask *= S(.6, .9, browMask);
        colMask *= smile;
        vec4 browCol = mix(vec4(.4, .2, .2, 1.), vec4(1., .75, .5, 1.), colMask); 
       
        uv.y += .15-offs*.5;
        blur += mix(.0, .1, smile);
        d1 = length(uv);
        s1 = S(.45, .45-blur, d1);
        d2 = length(uv-vec2(.1, -.2)*.7);
        s2 = S(.5, .5-blur, d2);
        float shadowMask = sat(s1-s2);
        
        col = mix(col, vec4(0.,0.,0.,1.), S(.0, 1., shadowMask)*.5);
        
        col = mix(col, browCol, S(.2, .4, browMask));
        
        return col;
    }
    ​
    vec4 Eye(vec2 uv, float side, vec2 m, float smile) {
        uv -= .5;
        uv.x *= side;
        
        float d = length(uv);
        vec4 irisCol = vec4(.3, .5, 1., 1.);
        vec4 col = mix(vec4(1.), irisCol, S(.1, .7, d)*.5);     // gradient in eye-white
        col.a = S(.5, .48, d);                                  // eye mask
        
        col.rgb *= 1. - S(.45, .5, d)*.5*sat(-uv.y-uv.x*side);  // eye shadow
        
        d = length(uv-m*.4);                                    // offset iris pos to look at mouse cursor
        col.rgb = mix(col.rgb, vec3(0.), S(.3, .28, d));        // iris outline
        
        irisCol.rgb *= 1. + S(.3, .05, d);                      // iris lighter in center
        float irisMask = S(.28, .25, d);
        col.rgb = mix(col.rgb, irisCol.rgb, irisMask);          // blend in iris
        
        d = length(uv-m*.45);                                   // offset pupile to look at mouse cursor
        
        float pupilSize = mix(.4, .16, smile);
        float pupilMask = S(pupilSize, pupilSize*.85, d);
        pupilMask *= irisMask;
        col.rgb = mix(col.rgb, vec3(0.), pupilMask);        // blend in pupil
        
        float t = iTime*3.;
        vec2 offs = vec2(sin(t+uv.y*25.), sin(t+uv.x*25.));
        offs *= .01*(1.-smile);
        
        uv += offs;
        float highlight = S(.1, .09, length(uv-vec2(-.15, .15)));
        highlight += S(.07, .05, length(uv+vec2(-.08, .08)));
        col.rgb = mix(col.rgb, vec3(1.), highlight);            // blend in highlight
        
        return col;
    }
    ​
    vec4 Mouth(vec2 uv, float smile) {
        uv -= .5;
        vec4 col = vec4(.5, .18, .05, 1.);
        
        uv.y *= 1.5;
        uv.y -= uv.x*uv.x*2.*smile;
        
        uv.x *= mix(2.5, 1., smile);
        
        float d = length(uv);
        col.a = S(.5, .48, d);
        
        vec2 tUv = uv;
        tUv.y += (abs(uv.x)*.5+.1)*(1.-smile);
        float td = length(tUv-vec2(0., .6));
        
        vec3 toothCol = vec3(1.)*S(.6, .35, d);
        col.rgb = mix(col.rgb, toothCol, S(.4, .37, td));
        
        td = length(uv+vec2(0., .5));
        col.rgb = mix(col.rgb, vec3(1., .5, .5), S(.5, .2, td));
        return col;
    }
    ​
    vec4 Head(vec2 uv) {
        vec4 col = vec4(.9, .65, .1, 1.);
        
        float d = length(uv);
        
        col.a = S(.5, .49, d);
        
        float edgeShade = remap01(.35, .5, d);
        edgeShade *= edgeShade;
        col.rgb *= 1.-edgeShade*.5;
        
        col.rgb = mix(col.rgb, vec3(.6, .3, .1), S(.47, .48, d));
        
        float highlight = S(.41, .405, d);
        highlight *= remap(.41, -.1, .75, 0., uv.y);
        highlight *= S(.18, .19, length(uv-vec2(.21, .08)));
        col.rgb = mix(col.rgb, vec3(1.), highlight);
        
        d = length(uv-vec2(.25, -.2));
        float cheek = S(.2,.01, d)*.4;
        cheek *= S(.17, .16, d);
        col.rgb = mix(col.rgb, vec3(1., .1, .1), cheek);
        
        return col;
    }
    ​
    vec4 Smiley(vec2 uv, vec2 m, float smile) {
        vec4 col = vec4(0.);
        
        if(length(uv)<.5) {                 // only bother about pixels that are actually inside the head
            float side = sign(uv.x);
            uv.x = abs(uv.x);
            vec4 head = Head(uv);
            col = mix(col, head, head.a);
    ​
            if(length(uv-vec2(.2, .075))<.175) {
                vec4 eye = Eye(within(uv, vec4(.03, -.1, .37, .25)), side, m, smile);
                col = mix(col, eye, eye.a);
            }
    ​
            if(length(uv-vec2(.0, -.15))<.3) {
                vec4 mouth = Mouth(within(uv, vec4(-.3, -.43, .3, -.13)), smile);
                col = mix(col, mouth, mouth.a);
            }
    ​
            if(length(uv-vec2(.185, .325))<.18) {
                vec4 brow = Brow(within(uv, vec4(.03, .2, .4, .45)), smile);
                col = mix(col, brow, brow.a);
            }
        }
        
        return col;
    }
    ​
    void mainImage( out vec4 fragColor, in vec2 fragCoord )
    {
        float t = iTime;
        
        vec2 uv = fragCoord.xy / iResolution.xy;
        uv -= .5;
        uv.x *= iResolution.x/iResolution.y;
        
        vec2 m = iMouse.xy / iResolution.xy;
        m -= .5;
        
        if(m.x<-.49 && m.y<-.49) {          // make it that he looks around when the mouse hasn't been used
            float s = sin(t*.5);
            float c = cos(t*.38);
            
            m = vec2(s, c)*.4;
        }
        
        if(length(m) > .707) m *= 0.;       // fix bug when coming back from fullscreen
        
        float d = dot(uv, uv);
        uv -= m*sat(.23-d);
        
        float smile = sin(t*.5)*.5+.5;
        fragColor = Smiley(uv, m, smile);
    }

![](/img/themes/classic/play.png) Compiled in 0.3 secs

3658 chars

![](/img/themes/classic/screenshot.png) XS S M L XL XXL
![](/img/themes/classic/help.png)

  
Filternearestlinearmipmap  
Wrapclamprepeat  

VFlip

![](/img/close2.png)

iChannel0

![](/img/themes/classic/pause.png)![](/img/themes/classic/rewind.png)![](/img/themes/classic/speakerOff.png)![](/img/themes/classic/options.png)

  
Filternearestlinearmipmap  
Wrapclamprepeat  

VFlip

![](/img/close2.png)

iChannel1

![](/img/themes/classic/pause.png)![](/img/themes/classic/rewind.png)![](/img/themes/classic/speakerOff.png)![](/img/themes/classic/options.png)

  
Filternearestlinearmipmap  
Wrapclamprepeat  

VFlip

![](/img/close2.png)

iChannel2

![](/img/themes/classic/pause.png)![](/img/themes/classic/rewind.png)![](/img/themes/classic/speakerOff.png)![](/img/themes/classic/options.png)

  
Filternearestlinearmipmap  
Wrapclamprepeat  

VFlip

![](/img/close2.png)

iChannel3

![](/img/themes/classic/pause.png)![](/img/themes/classic/rewind.png)![](/img/themes/classic/speakerOff.png)![](/img/themes/classic/options.png)

评论 (32)  

[Sign in](/signin) to post a comment.  
  

![](/img/profile.jpg)

[ArtemisLin](/user/ArtemisLin), 2021-01-20  
wow!!!! That's awesome!!! I learn from it, thanks, teacher!

![](/img/profile.jpg)

[xwh736](/user/xwh736), 2020-06-11  
Thank you! I like it

![](/img/profile.jpg)

[Alfonzo](/user/Alfonzo), 2019-10-08  
Wow!

![](/img/profile.jpg)

[wcfairytale](/user/wcfairytale), 2019-09-30  
I smiled, lovely

![](/media/users/avin/profile.png)

[avin](/user/avin), 2019-04-12  
my favorite shader <3

![](/media/users/olgaflor/profile.png)

[olgaflor](/user/olgaflor), 2019-03-24  
Thanks cool ;)

![](/img/profile.jpg)

[giorgionetg](/user/giorgionetg), 2018-08-01  
AWESOME!!!

![](/media/users/arminkz/profile.png)

[arminkz](/user/arminkz), 2018-04-29  
hey guys , im developing a native shadertoy like app free and opensource feel
free to check it out and contribute if you are interested.
https://github.com/arminkz/ShaderToy.NET

![](/img/profile.jpg)

[akhgary](/user/akhgary), 2018-04-25  
cute as hell

![](/media/users/Danguafer/profile.jpeg)

[Danguafer](/user/Danguafer), 2018-04-25  
Smiley on drugs

![](/media/users/MacSlow/profile.jpeg)

[MacSlow](/user/MacSlow), 2017-11-11  
That is a very compelling variation of "painting" with math!
![](/img/emoticonHappy.png)

![](/img/profile.jpg)

[woodorl](/user/woodorl), 2017-10-20  
Your tutorial is super helpful. Thanks a lot!

![](/media/users/yahe/profile.jpeg)

[yahe](/user/yahe), 2017-05-23  
Oh my, totally make my day!!

![](/media/users/dila/profile.png)

[dila](/user/dila), 2017-03-09  
great tutorials too!

![](/img/profile.jpg)

[Shane](/user/Shane), 2017-02-26  
Love it. So cleverly executed.

![](/media/users/vgs/profile.jpeg)

[vgs](/user/vgs), 2017-02-24  
Amazing! Beautifully crafted!

![](/media/users/shau/profile.png)

[shau](/user/shau), 2017-02-24  
Nice tutorial. Thanks

![](/img/profile.jpg)

[public_int_i](/user/public_int_i), 2017-02-24  
Fantastic

![](/media/users/zproxy/profile.png)

[zproxy](/user/zproxy), 2017-02-23  
shaders are the new gif

![](/media/users/TambakoJaguar/profile.jpeg)

[TambakoJaguar](/user/TambakoJaguar), 2017-02-23  
Wow, aweseome and cool!

![](/img/profile.jpg)

[gigatron](/user/gigatron), 2017-02-23  
i like it .. good job , thx !

![](/img/profile.jpg)

[coyote](/user/coyote), 2017-02-23  
![](/img/emoticonLove.png)

![](/media/users/BigWIngs/profile.jpeg)

[BigWIngs](/user/BigWIngs), 2017-02-23  
@blackjero - figured it out, fixed now @iq - I can't seem to get the video tag
to work. Am I missing something? @everone else - Thanks!

![](/media/users/aiekick/profile.png)

[aiekick](/user/aiekick), 2017-02-23  
cute

![](/media/users/flockaroo/profile.jpeg)

[flockaroo](/user/flockaroo), 2017-02-23  
wow, very well done!

![](/media/users/iapafoto/profile.png)

[iapafoto](/user/iapafoto), 2017-02-23  
incredible quality !

![](/media/users/poljere/profile.png)

[poljere](/user/poljere), 2017-02-23  
awesome!!!

![](/img/profile.jpg)

[blackjero](/user/blackjero), 2017-02-23  
I think the way to handle it is to pretend it was intentional, hehe (the way
it looks dead with eyes all white... it is cool)

![](/media/users/BigWIngs/profile.jpeg)

[BigWIngs](/user/BigWIngs), 2017-02-23  
@blackjero - I know the coming-back-from-fullscreen bug.. don't know how to
handle it though.. I'm open to suggestions ;) @iq - Thanks for the tip! Should
be fixed now.

![](/media/users/GregRostami/profile.jpeg)

[GregRostami](/user/GregRostami), 2017-02-23  
JAW DROPPED!!

![](/media/users/iq/profile.png)

[iq](/user/iq), 2017-02-23  
There's lots of love in this one!! Super well done! Shadertoy Hint - put your
youtube link in between [video] tags to make a link (check the "?" little icon
under the comments to see how this works)

![](/img/profile.jpg)

[blackjero](/user/blackjero), 2017-02-23  
That's really nice, so much happiness in that one :-) It turns into an unhappy
zombie version when we go back from full screen (on purpose?) which is kind of
fun too.

Community Forums

  * [事件](/events)
  * [In Facebook (english)](https://www.facebook.com/groups/147749602472741)
  * [In Facebook (korean)](https://www.facebook.com/groups/1339783682699494)
  * [In Discord](https://discord.gg/XtmMN6E) ([direct link](https://discordapp.com/channels/578696555612209173/579531723348639754))

Feedback and Support

  * [Facebook](https://www.facebook.com/Shadertoy)
  * [Twitter](https://twitter.com/shadertoy)
  * [Patreon](https://www.patreon.com/shadertoy)
  * [Roadmap](https://trello.com/b/5hM0CjId)

Shadertoy

  * [商店](/store)
  * [如何](/howto)
  * [条款和隐私](/terms)
  * [关于](/about)

Apps and Plugins

  * [Official iPhone App](https://itunes.apple.com/us/app/shadertoy/id717961814) by [Reinder](/user/reinder)
  * [Screensaver](https://steamcommunity.com/sharedfiles/filedetails/?id=1726697188) by [Kosro](/user/kosro)
  * [Shadertoy plugin](https://chrome.google.com/webstore/detail/shadertoy-unofficial-plug/ohicbclhdmkhoabobgppffepcopomhgl) by [Patu](/user/patu)

Tutorials

  * [Shader coding intro](https://www.youtube.com/watch?v=0ifChJ0nJfM) by [iq](/user/iq)
  * [Shadertoy Unofficial](https://shadertoyunofficial.wordpress.com/) by [FabriceNeyret2](/user/FabriceNeyret2)

We use cookies to give you the best experience on our website. If you continue
using Shadertoy, we'll assume that you are happy to receive all cookies on
this website. For more information, please review our [条款和隐私](/terms).

Accept

Select input for iChannel

  * [Misc](javascript:void\(0\))
  * [视频](javascript:void\(0\))
  * [Cubemaps](javascript:void\(0\))
  * [Volumes](javascript:void\(0\))
  * [纹理](javascript:void\(0\))
  * [音乐](javascript:void\(0\))

| |

  
by  
  
  
  
  
---|---  
  
| |

  
by  
  
  
  
  
---|---  
  
| |

  
by  
  
  
  
  
---|---  
  
| |

  
by  
  
  
  
  
---|---  
  
| |

  
by  
  
  
  
  
---|---  
  
| |

  
by  
  
  
  
  
---|---  
  
| |

  
by  
  
  
  
  
---|---  
  
| |

  
by  
  
  
  
  
---|---  
  
| |

  
by  
  
  
  
  
---|---  
  
  
  

| |

  
by  
  
  
  
  
---|---  
  
| |

  
by  
  
  
  
  
---|---  
  
| |

  
by  
  
  
  
  
---|---  
  
| |

  
by  
  
  
  
  
---|---  
  
| |

  
by  
  
  
  
  
---|---  
  
| |

  
by  
  
  
  
  
---|---  
  
| |

  
by  
  
  
  
  
---|---  
  
| |

  
by  
  
  
  
  
---|---  
  
| |

  
by  
  
  
  
  
---|---  
  
  
  

| |

  
by  
  
  
  
  
---|---  
  
| |

  
by  
  
  
  
  
---|---  
  
| |

  
by  
  
  
  
  
---|---  
  
| |

  
by  
  
  
  
  
---|---  
  
| |

  
by  
  
  
  
  
---|---  
  
| |

  
by  
  
  
  
  
---|---  
  
| |

  
by  
  
  
  
  
---|---  
  
| |

  
by  
  
  
  
  
---|---  
  
| |

  
by  
  
  
  
  
---|---  
  
  
  

| |

  
by  
  
  
  
  
---|---  
  
| |

  
by  
  
  
  
  
---|---  
  
| |

  
by  
  
  
  
  
---|---  
  
| |

  
by  
  
  
  
  
---|---  
  
| |

  
by  
  
  
  
  
---|---  
  
| |

  
by  
  
  
  
  
---|---  
  
| |

  
by  
  
  
  
  
---|---  
  
| |

  
by  
  
  
  
  
---|---  
  
| |

  
by  
  
  
  
  
---|---  
  
  
  

| |

  
by  
  
  
  
  
---|---  
  
| |

  
by  
  
  
  
  
---|---  
  
| |

  
by  
  
  
  
  
---|---  
  
| |

  
by  
  
  
  
  
---|---  
  
| |

  
by  
  
  
  
  
---|---  
  
| |

  
by  
  
  
  
  
---|---  
  
| |

  
by  
  
  
  
  
---|---  
  
| |

  
by  
  
  
  
  
---|---  
  
| |

  
by  
  
  
  
  
---|---  
  
  
  

| |

  
by  
  
  
  
  
---|---  
  
| |

  
by  
  
  
  
  
---|---  
  
| |

  
by  
  
  
  
  
---|---  
  
| |

  
by  
  
  
  
  
---|---  
  
| |

  
by  
  
  
  
  
---|---  
  
| |

  
by  
  
  
  
  
---|---  
  
| |

  
by  
  
  
  
  
---|---  
  
| |

  
by  
  
  
  
  
---|---  
  
| |

  
by  
  
  
  
  
---|---  
  
  
  

GLSL帮助

此帮助只覆盖与Shadertoy相关的GLSL ES部分。完整的规范请看 [GLSL
ES规范](https://www.khronos.org/registry/OpenGL/specs/es/3.0/GLSL_ES_Specification_3.00.pdf)  
  

## Language:

* * *

  * **Version:** WebGL 2.0
  * **Arithmetic:** ( ) + - ! * / %
  * **Logical/Relatonal:** ~ < > <= >= == != && ||
  * **Bit Operators:** & ^ | << >>
  * **Comments:** // /* */
  * **Types:** void bool int uint float vec2 vec3 vec4 bvec2 bvec3 bvec4 ivec2 ivec3 ivec4 uvec2 uvec3 uvec4 mat2 mat3 mat4 mat?x? sampler2D, sampler3D, samplerCube
  * **Format:** float a = 1.0; int b = 1; uint i = 1U; int i = 0x1;
  * **Function Parameter Qualifiers:** [none], in, out, inout
  * **Global Variable Qualifiers:** const
  * **Vector Components:** .xyzw .rgba .stpq
  * **Flow Control:** if else for return break continue switch/case
  * **Output:** vec4 fragColor
  * **Input:** vec2 fragCoord
  * **Preprocessor:** # #define #undef #if #ifdef #ifndef #else #elif #endif #error #pragma #line

  

## Built-in Functions:

* * *

  * type radians (type degrees)
  * type degrees (type radians)
  * type sin (type angle)
  * type cos (type angle)
  * type tan (type angle)
  * type asin (type x)
  * type acos (type x)
  * type atan (type y, type x)
  * type atan (type y_over_x)
  * type sinh (type x)
  * type cosh (type x)
  * type tanh (type x)
  * type asinh (type x)
  * type acosh (type x)
  * type atanh (type x)

  * type pow (type x, type y)
  * type exp (type x)
  * type log (type x)
  * type exp2 (type x)
  * type log2 (type x)
  * type sqrt (type x)
  * type inversesqrt (type x)

  * type abs (type x)
  * type sign (type x)
  * type floor (type x)
  * type ceil (type x)
  * type trunc (type x)
  * type fract (type x)
  * type mod (type x, float y)
  * type modf (type x, out type i)
  * type min (type x, type y)
  * type max (type x, type y)
  * type clamp (type x, type minV, type maxV)
  * type mix (type x, type y, type a)
  * type step (type edge, type x)
  * type smoothstep (type a, type b, type x)

  * float length (type x)
  * float distance (type p0, type p1)
  * float dot (type x, type y)
  * vec3 cross (vec3 x, vec3 y)
  * type normalize (type x)
  * type faceforward (type N, type I, type Nref)
  * type reflect (type I, type N)
  * type refract (type I, type N,float eta)
  * float determinant(mat? m)
  * mat?x? outerProduct(vec? c, vec? r)
  * type matrixCompMult (type x, type y)
  * type inverse (type inverse)
  * type transpose (type inverse)

|

  * vec4 texture( sampler? , vec? coord [, float bias])
  * vec4 textureLod( sampler, vec? coord, float lod)
  * vec4 textureLodOffset( sampler? sampler, vec? coord, float lod, ivec? offset)
  * vec4 textureGrad( sampler? , vec? coord, vec2 dPdx, vec2 dPdy)
  * vec4 textureGradOffset sampler? , vec? coord, vec? dPdx, vec? dPdy, vec? offset)
  * vec4 textureProj( sampler? , vec? coord [, float bias])
  * vec4 textureProjLod( sampler? , vec? coord, float lod)
  * vec4 textureProjLodOffset( sampler? , vec? coord, float lod, vec? offset)
  * vec4 textureProjGrad( sampler? , vec? coord, vec2 dPdx, vec2 dPdy)
  * vec4 texelFetch( sampler? , ivec? coord, int lod)
  * vec4 texelFetchOffset( sampler?, ivec? coord, int lod, ivec? offset )
  * ivec? textureSize( sampler? , int lod)

  * type dFdx (type x)
  * type dFdy (type x)
  * type fwidth (type p)

  * type isnan (type x)
  * type isinf (type x)
  * float intBitsToFloat (int v)
  * uint uintBitsToFloat (uint v)
  * int floatBitsToInt (float v)
  * uint floatBitsToUint (float v)
  * uint packSnorm2x16 (vec2 v)
  * uint packUnorm2x16 (vec2 v)
  * vec2 unpackSnorm2x16 (uint p)
  * vec2 unpackUnorm2x16 (uint p)

  * bvec lessThan (type x, type y)
  * bvec lessThanEqual (type x, type y)
  * bvec greaterThan (type x, type y)
  * bvec greaterThanEqual (type x, type y)
  * bvec equal (type x, type y)
  * bvec notEqual (type x, type y)
  * bool any (bvec x)
  * bool all (bvec x)
  * bvec not (bvec x)

  
---|---  
  

## How-to

* * *

  * **Use structs:** struct myDataType { float occlusion; vec3 color; }; myDataType myData = myDataType(0.7, vec3(1.0, 2.0, 3.0));
  * **Initialize arrays:** float[] x = float[] (0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6);
  * **Do conversions:** int a = 3; float b = float(a);
  * **Do component swizzling:** vec4 a = vec4(1.0,2.0,3.0,4.0); vec4 b = a.zyyw;
  * **Access matrix components:** mat4 m; m[1] = vec4(2.0); m[0][0] = 1.0; m[2][3] = 2.0;

  

## Be careful!

* * *

  * **the _f_ suffix for floating pont numbers:** 1.0f is illegal in GLSL. You must use 1.0
  * **saturate():** saturate(x) doesn't exist in GLSL. Use clamp(x,0.0,1.0) instead
  * **pow/sqrt:** please don't feed sqrt() and pow() with negative numbers. Add an abs() or max(0.0,) to the argument
  * **mod:** please don't do mod(x,0.0). This is undefined in some platforms
  * **variables:** initialize your variables! Don't assume they'll be set to zero by default
  * **functions:** don't call your functions the same as some of your variables

  

## Shadertoy Inputs

* * *

**vec3**|  **iResolution**|  image/buffer| The viewport resolution (z is pixel
aspect ratio, usually 1.0)  
---|---|---|---  
**float**|  **iTime**|  image/sound/buffer| Current time in seconds  
**float**|  **iTimeDelta**|  image/buffer| Time it takes to render a frame, in
seconds  
**int**|  **iFrame**|  image/buffer| Current frame  
**float**|  **iFrameRate**|  image/buffer| Number of frames rendered per
second  
**float**|  **iChannelTime[4]**|  image/buffer| Time for channel (if video or
sound), in seconds  
**vec3**|  **iChannelResolution[4]**|  image/buffer/sound| Input texture
resolution for each channel  
**vec4**|  **iMouse**|  image/buffer| xy = current pixel coords (if LMB is
down). zw = click pixel  
**sampler2D**|  **iChannel{i}**|  image/buffer/sound| Sampler for input
textures i  
**vec4**|  **iDate**|  image/buffer/sound| Year, month, day, time in seconds
in .xyzw  
**float**|  **iSampleRate**|  image/buffer/sound| The sound sample rate
(typically 44100)  
  

## Shadertoy Outputs

* * *

Image shaders: fragColor is used as output channel. It is not, for now,
mandatory but recommended to leave the alpha channel to 1.0.  
  
Sound shaders: the mainSound() function returns a vec2 containing the left and
right (stereo) sound channel wave data.  
  
  

Share your shader

Yes

No

BBCode Help

## Codes:

* * *

You can format your comments by using standard
[BBCode](http://en.wikipedia.org/wiki/BBCode). The following tags are
implemented in Shadertoy:  
  
Bold| |  **[b]** this text goes in bold **[/b]**  
---|---|---  
Italic| |  **[i]** this text goes in italic **[/i]**  
Images| |  **[img]** url_to_image **[/img]**  
Url| |  **[url]** http://www.shadertoy.com **[/url]**  
Url| |  **[url=** http://www.shadertoy.com **]** Shadertoy **[/url]**  
Code| |  **[code]** fixed-width text **[/code]**  
Video| |  **[video]** http://www.youtube.com/watch?v=0ifChJ0nJfM **[/video]**  
  

## Emoticons:

* * *

:)| | ![](/img/emoticonHappy.png)  
---|---|---  
:(| | ![](/img/emoticonSad.png)  
:D| | ![](/img/emoticonLaugh.png)  
:love:| | ![](/img/emoticonLove.png)  
:octopus:| | ![](/img/emoticonOctopus.png)  
:octopusballoon:| | ![](/img/emoticonOctopusBalloon.png)  
  

## Symbols:

* * *

:alpha:| | α  
---|---|---  
:beta:| | β  
:delta:| | Δ  
:epsilon:| | ε  
:nabla:| | ∇  
:square:| | ²  
:cube:| | ³  
:limit:| | ≐  
  

Share your shader

**Direct link:**  
  
Just copy and paste this URL below:  
  
**Embed:**  
  
<iframe width="640" height="360" frameborder="0"
src="https://www.shadertoy.com/embed/lsXcWn?gui=true&t=10&paused=true&muted=false"
allowfullscreen></iframe>

Add to playlist

