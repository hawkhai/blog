---
title : 自动快照存档
---

* TIME: 2021-02-05 22:55:05
* URL: <https://github.com/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator>

-----

Skip to content

[ ](https://github.com/)

[ Sign up
](/join?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2F%3Cuser-
name%3E%2F%3Crepo-name%3E&source=header-repo)

  * Why GitHub? 

[Features →](/features)

    * [Code review](/features/code-review/)
    * [Project management](/features/project-management/)
    * [Integrations](/features/integrations)
    * [Actions](/features/actions)
    * [Packages](/features/packages)
    * [Security](/features/security)
    * [Team management](/features#team-management)
    * [Hosting](/features#hosting)
    * [Mobile](/mobile)
    * [Customer stories →](/customer-stories)
    * [Security →](/security)

  * [Team](/team)
  * [Enterprise](/enterprise)
  * Explore 

    * [Explore GitHub →](/explore)

#### Learn & contribute

    * [Topics](/topics)
    * [Collections](/collections)
    * [Trending](/trending)
    * [Learning Lab](https://lab.github.com/)
    * [Open source guides](https://opensource.guide)

#### Connect with others

    * [Events](https://github.com/events)
    * [Community forum](https://github.community)
    * [GitHub Education](https://education.github.com)
    * [GitHub Stars program](https://stars.github.com)

  * [Marketplace](/marketplace)
  * Pricing 

[Plans →](/pricing)

    * [Compare plans](/pricing#feature-comparison)
    * [Contact Sales](https://enterprise.github.com/contact)
    * [Nonprofit →](/nonprofit)
    * [Education →](https://education.github.com)

![](https://github.githubassets.com/images/search-key-slash.svg)

  * [ ![]() In this repository  All GitHub  ↵ Jump to ↵ ]()

  * No suggested jump to results

  * [ ![]() In this repository  All GitHub  ↵ Jump to ↵ ]()
  * [ ![]() In this organization  All GitHub  ↵ Jump to ↵ ]()
  * [ ![]() In this repository  All GitHub  ↵ Jump to ↵ ]()

[ Sign in ](/login?return_to=%2FGPUOpen-
LibrariesAndSDKs%2FVulkanMemoryAllocator) [ Sign up
](/join?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2F%3Cuser-
name%3E%2F%3Crepo-name%3E&source=header-repo&source_repo=GPUOpen-
LibrariesAndSDKs%2FVulkanMemoryAllocator)

{{ message }}

#  [GPUOpen-LibrariesAndSDKs](/GPUOpen-LibrariesAndSDKs) /
**[VulkanMemoryAllocator](/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator) **

  * [ Watch ](/login?return_to=%2FGPUOpen-LibrariesAndSDKs%2FVulkanMemoryAllocator) [ 65 ](/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator/watchers)
  * [ Star ](/login?return_to=%2FGPUOpen-LibrariesAndSDKs%2FVulkanMemoryAllocator) [ 1.1k ](/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator/stargazers)
  * [ Fork ](/login?return_to=%2FGPUOpen-LibrariesAndSDKs%2FVulkanMemoryAllocator) [ 126 ](/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator/network/members)

Easy to integrate Vulkan memory allocation library

[ MIT License ](/GPUOpen-
LibrariesAndSDKs/VulkanMemoryAllocator/blob/master/LICENSE.txt)

[ 1.1k stars ](/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator/stargazers) [
126 forks ](/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator/network/members)

[ Star ](/login?return_to=%2FGPUOpen-LibrariesAndSDKs%2FVulkanMemoryAllocator)

[ Watch ](/login?return_to=%2FGPUOpen-
LibrariesAndSDKs%2FVulkanMemoryAllocator)

  * [ Code ](/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator)
  * [ Issues 4 ](/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator/issues)
  * [ Pull requests 0 ](/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator/pulls)
  * [ Actions ](/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator/actions)
  * [ Projects 0 ](/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator/projects)
  * [ Wiki ](/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator/wiki)
  * [ Security ](/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator/security)
  * [ Insights ](/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator/pulse)

More

  * [ Code ](/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator)
  * [ Issues ](/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator/issues)
  * [ Pull requests ](/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator/pulls)
  * [ Actions ](/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator/actions)
  * [ Projects ](/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator/projects)
  * [ Wiki ](/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator/wiki)
  * [ Security ](/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator/security)
  * [ Insights ](/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator/pulse)

master

[ **1** branch ](/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator/branches) [
**8** tags ](/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator/tags)

[ Go to file ](/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator/find/master)
Code

[ ](https://docs.github.com/articles/which-remote-url-should-i-use)

Clone

HTTPS  GitHub CLI

Use Git or checkout with SVN using the web URL.

Work fast with our official CLI. [Learn more](https://cli.github.com).

  * [ Open with GitHub Desktop ](https://desktop.github.com)
  * [ Download ZIP ](/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator/archive/master.zip)

#### Launching GitHub Desktop

If nothing happens, [download GitHub Desktop](https://desktop.github.com/) and
try again.

Go back

#### Launching GitHub Desktop

If nothing happens, [download GitHub Desktop](https://desktop.github.com/) and
try again.

Go back

#### Launching Xcode

If nothing happens, [download Xcode](https://developer.apple.com/xcode/) and
try again.

Go back

#### Launching Visual Studio

If nothing happens, [download the GitHub extension for Visual
Studio](https://visualstudio.github.com/) and try again.

Go back

## Latest commit

[ ![@adam-
sawicki-a](https://avatars2.githubusercontent.com/u/29480618?s=60&v=4)
](/adam-sawicki-a)

[adam-sawicki-a](/GPUOpen-
LibrariesAndSDKs/VulkanMemoryAllocator/commits?author=adam-sawicki-a "View all
commits by adam-sawicki-a") [Added support for
VK_EXT_memory_priority](/GPUOpen-
LibrariesAndSDKs/VulkanMemoryAllocator/commit/f2012055ccda1fa3b27600c2cd7b457d74ded785
"Added support for VK_EXT_memory_priority

Added VMA_ALLOCATOR_CREATE_EXT_MEMORY_PRIORITY_BIT,
VmaAllocationCreateInfo::priority, VmaPoolCreateInfo::priority.

See #160")

…

Loading status checks…

[f201205](/GPUOpen-
LibrariesAndSDKs/VulkanMemoryAllocator/commit/f2012055ccda1fa3b27600c2cd7b457d74ded785)
[ 4 days ago ](/GPUOpen-
LibrariesAndSDKs/VulkanMemoryAllocator/commit/f2012055ccda1fa3b27600c2cd7b457d74ded785)

[Added support for VK_EXT_memory_priority](/GPUOpen-
LibrariesAndSDKs/VulkanMemoryAllocator/commit/f2012055ccda1fa3b27600c2cd7b457d74ded785)

    
    
    Added VMA_ALLOCATOR_CREATE_EXT_MEMORY_PRIORITY_BIT, VmaAllocationCreateInfo::priority, VmaPoolCreateInfo::priority.
    
    See [#160](https://github.com/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator/issues/160)

f201205

## Git stats

  * [ **679** commits  ](/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator/commits/master)

## Files

[Permalink](/GPUOpen-
LibrariesAndSDKs/VulkanMemoryAllocator/tree/f2012055ccda1fa3b27600c2cd7b457d74ded785)

Failed to load latest commit information.

Type

Name

Latest commit message

Commit time

[bin](/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator/tree/master/bin "bin")

[Rebuild binaries using Visual Studio 2017 instead of 2019](/GPUOpen-
LibrariesAndSDKs/VulkanMemoryAllocator/commit/1a63ebc8604f4339cdaeca3bbfa4c373622c75d3
"Rebuild binaries using Visual Studio 2017 instead of 2019

Added information about Microsoft Redistributable installer to README.md.")

12 months ago

[docs](/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator/tree/master/docs
"docs")

[Added support for VK_EXT_memory_priority](/GPUOpen-
LibrariesAndSDKs/VulkanMemoryAllocator/commit/f2012055ccda1fa3b27600c2cd7b457d74ded785
"Added support for VK_EXT_memory_priority

Added VMA_ALLOCATOR_CREATE_EXT_MEMORY_PRIORITY_BIT,
VmaAllocationCreateInfo::priority, VmaPoolCreateInfo::priority.

See #160")

4 days ago

[media](/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator/tree/master/media
"media")

[First commit](/GPUOpen-
LibrariesAndSDKs/VulkanMemoryAllocator/commit/e6e498f63a745cae4b9ca5abd8e6b32305d4e0aa
"First commit")

4 years ago

[premake](/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator/tree/master/premake
"premake")

[Update Premake5 to version 5.0.0-alpha14](/GPUOpen-
LibrariesAndSDKs/VulkanMemoryAllocator/commit/30b7a620ad2454fec84469dbd19dd7f86d62c5ca
"Update Premake5 to version 5.0.0-alpha14

To support Visual Studio 2019.")

2 years ago

[src](/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator/tree/master/src "src")

[Added support for VK_EXT_memory_priority](/GPUOpen-
LibrariesAndSDKs/VulkanMemoryAllocator/commit/f2012055ccda1fa3b27600c2cd7b457d74ded785
"Added support for VK_EXT_memory_priority

Added VMA_ALLOCATOR_CREATE_EXT_MEMORY_PRIORITY_BIT,
VmaAllocationCreateInfo::priority, VmaPoolCreateInfo::priority.

See #160")

4 days ago

[tools/VmaDumpVis](/GPUOpen-
LibrariesAndSDKs/VulkanMemoryAllocator/tree/master/tools/VmaDumpVis "This path
skips through empty directories")

[VmaDumpVis: Gracefully handle cases where there is nothing to put on
…](/GPUOpen-
LibrariesAndSDKs/VulkanMemoryAllocator/commit/f6a4037af427da22d619a64ece1e2db787b8ced0
"VmaDumpVis: Gracefully handle cases where there is nothing to put on the
image, e.g. the stats string was generated without detailed map enabled

Message is printed in that case and 1 is returned instead of division by zero
error.

Closes #125")

9 months ago

[.gitignore](/GPUOpen-
LibrariesAndSDKs/VulkanMemoryAllocator/blob/master/.gitignore ".gitignore")

[Revert "Comitting generated Visual Studio 2015 project to quickly
sta…](/GPUOpen-
LibrariesAndSDKs/VulkanMemoryAllocator/commit/0a5b3334afe8ed25403513c1fdd197413edfeed8
"Revert "Comitting generated Visual Studio 2015 project to quickly start
AppVeyor."

This reverts commit 3991af829fe213aa6e2b8a83945d24837f751390.")

4 years ago

[.travis.yml](/GPUOpen-
LibrariesAndSDKs/VulkanMemoryAllocator/blob/master/.travis.yml ".travis.yml")

[Update Vulkan SDK version in TravisCI configuration](/GPUOpen-
LibrariesAndSDKs/VulkanMemoryAllocator/commit/67f9dfa963c8c71975f3ba46f518640dcdadd631
"Update Vulkan SDK version in TravisCI configuration")

11 months ago

[CHANGELOG.md](/GPUOpen-
LibrariesAndSDKs/VulkanMemoryAllocator/blob/master/CHANGELOG.md
"CHANGELOG.md")

[Publish version 2.3.0 final](/GPUOpen-
LibrariesAndSDKs/VulkanMemoryAllocator/commit/e9bfb539d853607172f9a1a272dacab60a86e529
"Publish version 2.3.0 final

Updated version number. Regenerated Release binaries and Doxygen
documentation.")

14 months ago

[LICENSE.txt](/GPUOpen-
LibrariesAndSDKs/VulkanMemoryAllocator/blob/master/LICENSE.txt "LICENSE.txt")

[Add support for VK_AMD_device_coherent_memory extension](/GPUOpen-
LibrariesAndSDKs/VulkanMemoryAllocator/commit/508825012c267ad8ebbd55297e5d651c2c412fba
"Add support for VK_AMD_device_coherent_memory extension

- Added VMA_ALLOCATOR_CREATE_AMD_DEVICE_COHERENT_MEMORY_BIT.
- Fixed bug generating validation layers error when the extension is not enabled.
- Updated date in copyright header comments to year 2020.")

11 months ago

[README.md](/GPUOpen-
LibrariesAndSDKs/VulkanMemoryAllocator/blob/master/README.md "README.md")

[Improvements in documentation.](/GPUOpen-
LibrariesAndSDKs/VulkanMemoryAllocator/commit/97880507ac709f688b1d8de6adea03a7451c3706
"Improvements in documentation.")

2 months ago

View code

##  README.md

# Vulkan Memory Allocator

Easy to integrate Vulkan memory allocation library.

**Documentation:** See [Vulkan Memory Allocator](https://gpuopen-
librariesandsdks.github.io/VulkanMemoryAllocator/html/) (generated from
Doxygen-style comments in [src/vk_mem_alloc.h](/GPUOpen-
LibrariesAndSDKs/VulkanMemoryAllocator/blob/master/src/vk_mem_alloc.h))

**License:** MIT. See [LICENSE.txt](/GPUOpen-
LibrariesAndSDKs/VulkanMemoryAllocator/blob/master/LICENSE.txt)

**Changelog:** See [CHANGELOG.md](/GPUOpen-
LibrariesAndSDKs/VulkanMemoryAllocator/blob/master/CHANGELOG.md)

**Product page:** [Vulkan Memory Allocator on
GPUOpen](https://gpuopen.com/gaming-product/vulkan-memory-allocator/)

**Build status:**

  * Windows: [![Build status](https://camo.githubusercontent.com/bf1520fe3e06f8caa6f8be911370a1055a417900b9d2abc28e29de5b2c82bcce/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f34766c63726230656d6b61696f32706e2f6272616e63682f6d61737465723f7376673d74727565)](https://ci.appveyor.com/project/adam-sawicki-amd/vulkanmemoryallocator/branch/master)
  * Linux: [![Build Status](https://camo.githubusercontent.com/31f63502e3481407637720d1272515d51527022a3d43ebe1672b221647165ad6/68747470733a2f2f7472617669732d63692e6f72672f4750554f70656e2d4c6962726172696573416e6453444b732f56756c6b616e4d656d6f7279416c6c6f6361746f722e7376673f6272616e63683d6d6173746572)](https://travis-ci.org/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator)

# Problem

Memory allocation and resource (buffer and image) creation in Vulkan is
difficult (comparing to older graphics API-s, like D3D11 or OpenGL) for
several reasons:

  * It requires a lot of boilerplate code, just like everything else in Vulkan, because it is a low-level and high-performance API.
  * There is additional level of indirection: `VkDeviceMemory` is allocated separately from creating `VkBuffer`/`VkImage` and they must be bound together.
  * Driver must be queried for supported memory heaps and memory types. Different IHVs provide different types of it.
  * It is recommended practice to allocate bigger chunks of memory and assign parts of them to particular resources.

# Features

This library can help game developers to manage memory allocations and
resource creation by offering some higher-level functions:

  1. Functions that help to choose correct and optimal memory type based on intended usage of the memory. 
    * Required or preferred traits of the memory are expressed using higher-level description comparing to Vulkan flags.
  2. Functions that allocate memory blocks, reserve and return parts of them (`VkDeviceMemory` \+ offset + size) to the user. 
    * Library keeps track of allocated memory blocks, used and unused ranges inside them, finds best matching unused ranges for new allocations, respects all the rules of alignment and buffer/image granularity.
  3. Functions that can create an image/buffer, allocate memory for it and bind them together - all in one call.

Additional features:

  * Well-documented - description of all functions and structures provided, along with chapters that contain general description and example code.
  * Thread-safety: Library is designed to be used in multithreaded code. Access to a single device memory block referred by different buffers and textures (binding, mapping) is synchronized internally.
  * Configuration: Fill optional members of CreateInfo structure to provide custom CPU memory allocator, pointers to Vulkan functions and other parameters.
  * Customization: Predefine appropriate macros to provide your own implementation of all external facilities used by the library, from assert, mutex, and atomic, to vector and linked list.
  * Support for memory mapping, reference-counted internally. Support for persistently mapped memory: Just allocate with appropriate flag and you get access to mapped pointer.
  * Support for non-coherent memory. Functions that flush/invalidate memory. `nonCoherentAtomSize` is respected automatically.
  * Support for resource aliasing (overlap).
  * Support for sparse binding and sparse residency: Convenience functions that allocate or free multiple memory pages at once.
  * Custom memory pools: Create a pool with desired parameters (e.g. fixed or limited maximum size) and allocate memory out of it.
  * Linear allocator: Create a pool with linear algorithm and use it for much faster allocations and deallocations in free-at-once, stack, double stack, or ring buffer fashion.
  * Support for Vulkan 1.0, 1.1, 1.2.
  * Support for extensions (and equivalent functionality included in new Vulkan versions): 
    * VK_EXT_memory_budget: Used internally if available to query for current usage and budget. If not available, it falls back to an estimation based on memory heap sizes.
    * VK_KHR_dedicated_allocation: Just enable it and it will be used automatically by the library.
    * VK_AMD_device_coherent_memory
    * VK_KHR_buffer_device_address
  * Defragmentation of GPU and CPU memory: Let the library move data around to free some memory blocks and make your allocations better compacted.
  * Lost allocations: Allocate memory with appropriate flags and let the library remove allocations that are not used for many frames to make room for new ones.
  * Statistics: Obtain detailed statistics about the amount of memory used, unused, number of allocated blocks, number of allocations etc. - globally, per memory heap, and per memory type.
  * Debug annotations: Associate string with name or opaque pointer to your own data with every allocation.
  * JSON dump: Obtain a string in JSON format with detailed map of internal state, including list of allocations and gaps between them.
  * Convert this JSON dump into a picture to visualize your memory. See [tools/VmaDumpVis](/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator/blob/master/tools/VmaDumpVis/README.md).
  * Debugging incorrect memory usage: Enable initialization of all allocated memory with a bit pattern to detect usage of uninitialized or freed memory. Enable validation of a magic number before and after every allocation to detect out-of-bounds memory corruption.
  * Record and replay sequence of calls to library functions to a file to check correctness, measure performance, and gather statistics.

# Prequisites

  * Self-contained C++ library in single header file. No external dependencies other than standard C and C++ library and of course Vulkan. STL containers are not used by default.
  * Public interface in C, in same convention as Vulkan API. Implementation in C++.
  * Error handling implemented by returning `VkResult` error codes - same way as in Vulkan.
  * Interface documented using Doxygen-style comments.
  * Platform-independent, but developed and tested on Windows using Visual Studio. Continuous integration setup for Windows and Linux. Used also on Android, MacOS, and other platforms.

# Example

Basic usage of this library is very simple. Advanced features are optional.
After you created global `VmaAllocator` object, a complete code needed to
create a buffer may look like this:

    
    
    VkBufferCreateInfo bufferInfo = { VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO };
    bufferInfo.size = 65536;
    bufferInfo.usage = VK_BUFFER_USAGE_VERTEX_BUFFER_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT;
    
    VmaAllocationCreateInfo allocInfo = {};
    allocInfo.usage = VMA_MEMORY_USAGE_GPU_ONLY;
    
    VkBuffer buffer;
    VmaAllocation allocation;
    vmaCreateBuffer(allocator, &bufferInfo, &allocInfo, &buffer, &allocation, nullptr);

With this one function call:

  1. `VkBuffer` is created.
  2. `VkDeviceMemory` block is allocated if needed.
  3. An unused region of the memory block is bound to this buffer.

`VmaAllocation` is an object that represents memory assigned to this buffer.
It can be queried for parameters like Vulkan memory handle and offset.

# Binaries

The release comes with precompiled binary executables for "VulkanSample"
application which contains test suite and "VmaReplay" tool. They are compiled
using Visual Studio 2017, so they require appropriate libraries to work,
including "vcruntime140.dll" and "msvcp140.dll". If their launch fails with
error message telling about those files missing, please download and install
[Microsoft Visual C++ Redistributable for Visual Studio 2015, 2017 and
2019](https://support.microsoft.com/en-us/help/2977003/the-latest-supported-
visual-c-downloads), "x64" version.

# Read more

See **[Documentation](https://gpuopen-
librariesandsdks.github.io/VulkanMemoryAllocator/html/)**.

# Software using this library

  * **[Detroit: Become Human](https://gpuopen.com/learn/porting-detroit-3/)**
  * **[Vulkan Samples](https://github.com/LunarG/VulkanSamples)** \- official Khronos Vulkan samples. License: Apache-style.
  * **[Anvil](https://github.com/GPUOpen-LibrariesAndSDKs/Anvil)** \- cross-platform framework for Vulkan. License: MIT.
  * **[Filament](https://github.com/google/filament)** \- physically based rendering engine for Android, Windows, Linux and macOS, from Google. Apache License 2.0.
  * **[Atypical Games - proprietary game engine](https://developer.samsung.com/galaxy-gamedev/gamedev-blog/infinitejet.html)**
  * **[Flax Engine](https://flaxengine.com/)**
  * **[Lightweight Java Game Library (LWJGL)](https://www.lwjgl.org/)** \- includes binding of the library for Java. License: BSD.
  * **[PowerVR SDK](https://github.com/powervr-graphics/Native_SDK)** \- C++ cross-platform 3D graphics SDK, from Imagination. License: MIT.
  * **[Skia](https://github.com/google/skia)** \- complete 2D graphic library for drawing Text, Geometries, and Images, from Google.
  * **[The Forge](https://github.com/ConfettiFX/The-Forge)** \- cross-platform rendering framework. Apache License 2.0.
  * **[VK9](https://github.com/disks86/VK9)** \- Direct3D 9 compatibility layer using Vulkan. Zlib lincese.
  * **[vkDOOM3](https://github.com/DustinHLand/vkDOOM3)** \- Vulkan port of GPL DOOM 3 BFG Edition. License: GNU GPL.
  * **[vkQuake2](https://github.com/kondrak/vkQuake2)** \- vanilla Quake 2 with Vulkan support. License: GNU GPL.
  * **[Vulkan Best Practice for Mobile Developers](https://github.com/ARM-software/vulkan_best_practice_for_mobile_developers)** from ARM. License: MIT.

[Many other projects on
GitHub](https://github.com/search?q=AMD_VULKAN_MEMORY_ALLOCATOR_H&type=Code)
and some game development studios that use Vulkan in their games.

# See also

  * **[D3D12 Memory Allocator](https://github.com/GPUOpen-LibrariesAndSDKs/D3D12MemoryAllocator)** \- equivalent library for Direct3D 12. License: MIT.
  * **[Awesome Vulkan](https://github.com/vinjn/awesome-vulkan)** \- a curated list of awesome Vulkan libraries, debuggers and resources.
  * **[VulkanMemoryAllocator-Hpp](https://github.com/malte-v/VulkanMemoryAllocator-Hpp)** \- C++ binding for this library. License: CC0-1.0.
  * **[PyVMA](https://github.com/realitix/pyvma)** \- Python wrapper for this library. Author: Jean-Sébastien B. (@realitix). License: Apache 2.0.
  * **[vk-mem](https://github.com/gwihlidal/vk-mem-rs)** \- Rust binding for this library. Author: Graham Wihlidal. License: Apache 2.0 or MIT.
  * **[Haskell bindings](https://hackage.haskell.org/package/VulkanMemoryAllocator)** , **[github](https://github.com/expipiplus1/vulkan/tree/master/VulkanMemoryAllocator)** \- Haskell bindings for this library. Author: Joe Hermaszewski (@expipiplus1). License BSD-3-Clause.
  * **[vma_sample_sdl](https://github.com/rextimmy/vma_sample_sdl)** \- SDL port of the sample app of this library (with the goal of running it on multiple platforms, including MacOS). Author: @rextimmy. License: MIT.
  * **[vulkan-malloc](https://github.com/dylanede/vulkan-malloc)** \- Vulkan memory allocation library for Rust. Based on version 1 of this library. Author: Dylan Ede (@dylanede). License: MIT / Apache 2.0.

## About

Easy to integrate Vulkan memory allocation library

### Topics

[ vulkan ](/topics/vulkan "Topic: vulkan") [ memory-management
](/topics/memory-management "Topic: memory-management")

### Resources

Readme

### License

[ MIT License ](/GPUOpen-
LibrariesAndSDKs/VulkanMemoryAllocator/blob/master/LICENSE.txt)

##  [ Releases 8 ](/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator/releases)

[ v2.3.0+vs2017 Latest  on 24 Jan 2020 ](/GPUOpen-
LibrariesAndSDKs/VulkanMemoryAllocator/releases/tag/v2.3.0%2Bvs2017)

[ \+ 7 releases ](/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator/releases)

##  [ Packages 0 ](/orgs/GPUOpen-
LibrariesAndSDKs/packages?repo_name=VulkanMemoryAllocator)

No packages published  

##  [ Contributors 30 ](/GPUOpen-
LibrariesAndSDKs/VulkanMemoryAllocator/graphs/contributors)

  * [ ![@adam-sawicki-a](https://avatars2.githubusercontent.com/u/29480618?s=64&v=4) ](/adam-sawicki-a)
  * [ ![@expipiplus1](https://avatars2.githubusercontent.com/u/857308?s=64&v=4) ](/expipiplus1)
  * [ ![@res2k](https://avatars1.githubusercontent.com/u/4117506?s=64&v=4) ](/res2k)
  * [ ![@nico](https://avatars2.githubusercontent.com/u/3487?s=64&v=4) ](/nico)
  * [ ![@realitix](https://avatars3.githubusercontent.com/u/6367936?s=64&v=4) ](/realitix)
  * [ ![@cdwfs](https://avatars3.githubusercontent.com/u/1944792?s=64&v=4) ](/cdwfs)
  * [ ![@r-barnes](https://avatars0.githubusercontent.com/u/3118036?s=64&v=4) ](/r-barnes)
  * [ ![@AshkanAliabadi](https://avatars2.githubusercontent.com/u/16107176?s=64&v=4) ](/AshkanAliabadi)
  * [ ![@Didgy74](https://avatars2.githubusercontent.com/u/25203601?s=64&v=4) ](/Didgy74)
  * [ ![@amerkoleci](https://avatars2.githubusercontent.com/u/1788857?s=64&v=4) ](/amerkoleci)
  * [ ![@dylanede](https://avatars1.githubusercontent.com/u/10339269?s=64&v=4) ](/dylanede)

[ \+ 19 contributors ](/GPUOpen-
LibrariesAndSDKs/VulkanMemoryAllocator/graphs/contributors)

## Languages

  * [ C++ 97.8% ](/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator/search?l=c%2B%2B)
  * Other 2.2%

  * © 2021 GitHub, Inc.
  * [Terms](https://github.com/site/terms)
  * [Privacy](https://github.com/site/privacy)
  * [Security](https://github.com/security)
  * [Status](https://www.githubstatus.com/)
  * [Help](https://docs.github.com)

[ ](https://github.com "GitHub")

  * [Contact GitHub](https://github.com/contact)
  * [Pricing](https://github.com/pricing)
  * [API](https://docs.github.com)
  * [Training](https://services.github.com)
  * [Blog](https://github.blog)
  * [About](https://github.com/about)

You can’t perform that action at this time.

You signed in with another tab or window. [Reload]() to refresh your session.
You signed out in another tab or window. [Reload]() to refresh your session.

